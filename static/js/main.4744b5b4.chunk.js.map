{"version":3,"sources":["components/DigitButton.js","components/CalEntry.js","components/OperatorButons.js","components/CalButtons.js","App.js","serviceWorker.js","index.js"],"names":["Digitbutton","Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","props","react_default","a","createElement","className","onClick","digit","OperatorButtons","res","CalButtons","state","num","showingNum","operator","waitingForOperand","waitingForDigit","DigitKeys","Oper","name","func","length","display","setState","String","concat","operation","prevOperator","inputValue","parseFloat","currentValue","newnum","_this2","defaultDisplay","toExponential","toPrecision","clear","disabled","addNum","Dot","map","DigitButton","i","OperatorButons","OperationKey","App","id","components_CalButtons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAmBeA,SCfQC,mCDAnB,SAAAD,IAAe,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,6EAIX,IAAII,EAAOJ,KAAKI,MAChB,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAASL,EAAMK,SACjDL,EAAMM,eATOb,cEgBXc,cAfX,SAAAA,IAAe,OAAAb,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,GAAAb,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,6EAIX,IAAII,EAAOJ,KAAKI,MAChB,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAASL,EAAMK,SACjDL,EAAMQ,aATWf,aCyJfgB,6MAtJbC,MAAQ,CACNC,IAAK,KACLC,WAAY,IACZC,SAAU,KACVC,mBAAmB,EACnBC,iBAAiB,EACjBC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCC,KAAM,CACJC,KAAM,CAAC,OAAK,OAAK,IAAK,IAAK,KAC3BC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,6EAGxBR,GACL,GAAIf,KAAKc,MAAME,WAAWQ,OAAO,GAAMxB,KAAKc,MAAMI,kBAAkB,CACpE,IAAMO,EAAUzB,KAAKc,MAAME,WACrBE,EAAoBlB,KAAKc,MAAMI,kBACrClB,KAAK0B,SAAS,CACZP,iBAAiB,IAGfD,EACFlB,KAAK0B,SAAS,CACZV,WAAYW,OAAOZ,GACnBG,mBAAmB,IAGrBlB,KAAK0B,SAAS,CACZV,WAAwB,MAAZS,EAAkBE,OAAOZ,GAAOU,EAAQG,OAAOD,OAAOZ,4CAK3Dc,GACX,IAAK7B,KAAKc,MAAMK,gBAAiB,CAC/B,IAAMJ,EAAMf,KAAKc,MAAMC,IACjBC,EAAahB,KAAKc,MAAME,WACxBc,EAAe9B,KAAKc,MAAMG,SAC1Bc,EAAaC,WAAWhB,GAE9B,GAAW,MAAPD,EACFf,KAAK0B,SAAS,CACZX,IAAKgB,SAEF,GAAID,EAAc,CACvB,IAAMG,EAAelB,GAAO,EACxBmB,EAAS,EACQ,MAAjBJ,EACFI,EAASD,EAAeF,EACE,MAAjBD,EACTI,EAASD,EAAeF,EACE,MAAjBD,EACTI,EAASD,EAAeF,EACE,MAAjBD,EACTI,EAASD,EAAeF,EACE,MAAjBD,IACTI,EAASH,GAGX/B,KAAK0B,SAAS,CACZX,IAAKmB,EACLlB,WAAYW,OAAOO,KAIvBlC,KAAK0B,SAAS,CACZR,mBAAmB,EACnBD,SAAUY,EACVV,iBAAiB,IAGjBnB,KAAKc,MAAMG,UACbjB,KAAK0B,SAAS,CACZT,SAAUY,oCAKd7B,KAAK0B,SAAS,CACZX,IAAK,KACLC,WAAY,IACZC,SAAU,KACVC,mBAAmB,kCAIrB,IAAMF,EAAahB,KAAKc,MAAME,WACJhB,KAAKc,MAAMI,kBAEnClB,KAAK0B,SAAS,CACZV,WAAY,KACZE,mBAAmB,IAGrBlB,KAAK0B,SAAS,CACZV,WAAYA,EAAa,IACzBE,mBAAmB,qCAKhB,IAAAiB,EAAAnC,KACHgB,EAAahB,KAAKc,MAAME,WACxBoB,EAAiB,KASrB,MAR8B,MAA1BpC,KAAKc,MAAME,YAAuC,OAAjBhB,KAAKc,MAAMC,MAC9CqB,EAAiB,KAEhBpB,EAAWQ,OAAO,IAEnBR,GADAA,EAAYgB,WAAWhB,IACDqB,gBACtBrB,EAAWgB,WAAWhB,GAAYsB,YAAY,IAG9CjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBQ,GACrCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVC,QAAS,kBAAM0B,EAAKI,UAEnBH,GAEH/B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAAS,kBAAM0B,EAAKT,SAAS,CAACV,YAAyB,EAAbA,KAAmBwB,SAAwB,GAAdxB,GAA1G,QACAX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAAS,kBAAM0B,EAAKT,SAAS,CAACV,WAAYA,EAAW,QAAxF,MAEFX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAAS,kBAAI0B,EAAKM,OAAO,KAAlE,KACApC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,QAAS,kBAAK0B,EAAKO,QAAtD,KAIC1C,KAAKc,MAAMM,UAAUuB,IAAI,SAAAjC,GAAK,OAC7BL,EAAAC,EAAAC,cAACqC,EAAD,CAAalC,MAAOA,EAAOD,QAAS,kBAAM0B,EAAKM,OAAO/B,UAI5DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZR,KAAKc,MAAMO,KAAKC,KAAKqB,IAAI,SAAC/B,EAAKiC,GAAN,OACxBxC,EAAAC,EAAAC,cAACuC,EAAD,CACElC,IAAKA,EACLH,QAAS,kBAAM0B,EAAKY,aAAaZ,EAAKrB,MAAMO,KAAKE,KAAKsB,WAIvD,YAlJUhD,aCWVmD,mLATX,OACE3C,EAAAC,EAAAC,cAAA,OAAK0C,GAAG,OAEN5C,EAAAC,EAAAC,cAAC2C,EAAD,cALUrD,aCOEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4744b5b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { string } from \"postcss-selector-parser\";\r\nimport \"./styles.css\";\r\nclass Digitbutton extends Component {\r\n    constructor() {\r\n        super();\r\n      }\r\n    render(){\r\n        let props= this.props\r\n        return(\r\n            <div>\r\n            <button className=\"calculator-key\" onClick={props.onClick}>\r\n            {props.digit}\r\n          </button>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Digitbutton;\r\n","import React, { Component } from \"react\";\r\n// import todoStore from \"../stores/TodoStore\";\r\n\r\n// let input;\r\nclass CalEntry extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>Calculator</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default CalEntry;\r\n","import React, { Component } from \"react\";\r\nimport { string } from \"postcss-selector-parser\";\r\nimport \"./styles.css\";\r\nclass OperatorButtons extends Component {\r\n    constructor() {\r\n        super();\r\n      }\r\n    render(){\r\n        let props= this.props\r\n        return(\r\n            <div>\r\n            <button className=\"calculator-key\" onClick={props.onClick}>\r\n            {props.res}\r\n          </button>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default OperatorButtons;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\nimport DigitButton from \"./DigitButton\";\r\nimport OperatorButtons from \"./OperatorButons\";\r\n\r\nclass CalButtons extends Component {\r\n  state = {\r\n    num: null,\r\n    showingNum: \"0\",\r\n    operator: null,\r\n    waitingForOperand: false,\r\n    waitingForDigit: true,\r\n    DigitKeys: [7, 8, 9, 4, 5, 6, 1, 2, 3],\r\n    Oper: {\r\n      name: [\"÷\", \"×\", \"-\", \"+\", \"=\"],\r\n      func: [\"/\", \"*\", \"-\", \"+\", \"=\"]\r\n    }\r\n  };\r\n  addNum(num) {\r\n    if((this.state.showingNum.length<7) || this.state.waitingForOperand){\r\n    const display = this.state.showingNum;\r\n    const waitingForOperand = this.state.waitingForOperand;\r\n    this.setState({\r\n      waitingForDigit: false\r\n    });\r\n\r\n    if (waitingForOperand) {\r\n      this.setState({\r\n        showingNum: String(num),\r\n        waitingForOperand: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showingNum: display === \"0\" ? String(num) : display.concat(String(num))\r\n      });\r\n    }\r\n  }\r\n  }\r\n  OperationKey(operation) {\r\n    if (!this.state.waitingForDigit) {\r\n      const num = this.state.num;\r\n      const showingNum = this.state.showingNum;\r\n      const prevOperator = this.state.operator;\r\n      const inputValue = parseFloat(showingNum);\r\n\r\n      if (num == null) {\r\n        this.setState({\r\n          num: inputValue\r\n        });\r\n      } else if (prevOperator) {\r\n        const currentValue = num || 0;\r\n        var newnum = 0;\r\n        if (prevOperator === \"/\") {\r\n          newnum = currentValue / inputValue;\r\n        } else if (prevOperator === \"+\") {\r\n          newnum = currentValue + inputValue;\r\n        } else if (prevOperator === \"*\") {\r\n          newnum = currentValue * inputValue;\r\n        } else if (prevOperator === \"-\") {\r\n          newnum = currentValue - inputValue;\r\n        } else if (prevOperator === \"=\") {\r\n          newnum = inputValue;\r\n        }\r\n\r\n        this.setState({\r\n          num: newnum,\r\n          showingNum: String(newnum)\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        waitingForOperand: true,\r\n        operator: operation,\r\n        waitingForDigit: true\r\n      });\r\n    }\r\n    if (this.state.operator) {\r\n      this.setState({\r\n        operator: operation\r\n      });\r\n    }\r\n  }\r\n  clear() {\r\n    this.setState({\r\n      num: null,\r\n      showingNum: \"0\",\r\n      operator: null,\r\n      waitingForOperand: false\r\n    });\r\n  }\r\n  Dot() {\r\n    const showingNum = this.state.showingNum;\r\n    const waitingForOperand = this.state.waitingForOperand;\r\n    if (waitingForOperand) {\r\n      this.setState({\r\n        showingNum: \"0.\",\r\n        waitingForOperand: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showingNum: showingNum + \".\",\r\n        waitingForOperand: false\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    var showingNum = this.state.showingNum;\r\n    var defaultDisplay = \"AC\";\r\n    if (this.state.showingNum !== \"0\" || this.state.num!==null) {\r\n      defaultDisplay = \"C\";\r\n    }\r\n    if(showingNum.length>7){\r\n      showingNum =parseFloat(showingNum)\r\n      showingNum=showingNum.toExponential()\r\n      showingNum=parseFloat(showingNum).toPrecision(3)\r\n    }\r\n    return (\r\n      <div className=\"calculator\">\r\n        <div className=\"calculator-display\">{showingNum}</div>\r\n        <div className=\"calculator-keypad\">\r\n          <div className=\"input-keys\">\r\n            <div className=\"function-keys\">\r\n              <button\r\n                className=\"calculator-key\"\r\n                onClick={() => this.clear()}\r\n              >\r\n                {defaultDisplay}\r\n              </button>\r\n              <button className=\"calculator-key\" onClick={() => this.setState({showingNum: showingNum*(-1)})} disabled={showingNum == 0}>±</button>\r\n              <button className=\"calculator-key\" onClick={() => this.setState({showingNum: showingNum/100})}>%</button>\r\n            </div>\r\n            <div className=\"digit-keys\">\r\n              <button className=\"calculator-key key-0\" onClick={()=>this.addNum(0)}>0</button>\r\n              <button className=\"calculator-key\" onClick={()=> this.Dot()}>\r\n                .\r\n              </button>\r\n              \r\n              {this.state.DigitKeys.map(digit => (\r\n                <DigitButton digit={digit} onClick={() => this.addNum(digit)} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"operator-keys\">\r\n            {this.state.Oper.name.map((res, i) => (\r\n              <OperatorButtons\r\n                res={res}\r\n                onClick={() => this.OperationKey(this.state.Oper.func[i])}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CalButtons;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CalEntry from \"./components/CalEntry\";\nimport CalButtons from \"./components/CalButtons\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"app\">\n        {/* <CalEntry /> */}\n        <CalButtons />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}